import { ICourse } from '../typings';
import { linksList } from './_links/methodsLinks';
import { taskList } from './_tasks/methodsTasks';

function getButtons(argument: string[]) {
  return [
    [
      {
        action: 'sendMethodsLinks',
        argument: argument[0],
        text: 'üòé –°—Å—ã–ª–∫–∏ –Ω–∞ MDN!',
      },
      {
        action: 'sendTask',
        argument: argument[1],
        text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ!',
      },
    ],
  ];
}

function getHeader(day: string | number, methods: string) {
  return `üë®‚Äçüè´ <b>–î–µ–Ω—å ${day}. –ú–µ—Ç–æ–¥—ã: ${methods}</b>`;
}

async function sendLinks({ argument, send }: any) {
  if (!argument) {
    return;
  }

  let newLinksListArray: any = [];

  Object.keys(linksList).map(function (key) {
    if (key === argument) {
      let x = linksList[key];
      newLinksListArray = Object.entries(x);
    }
  });

  await send({
    message: [
      `<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ—Ç–æ–¥—ã (MDN)</b>`,
      '',
      `<b>1. –ú–µ—Ç–æ–¥ ${newLinksListArray[0].shift()}()</b> - <a href="${
        newLinksListArray[0]
      }">–°—Å—ã–ª–∫–∞</a>`,
      '',
      `<b>2. –ú–µ—Ç–æ–¥ ${newLinksListArray[1].shift()}()</b> - <a href="${
        newLinksListArray[1]
      }">–°—Å—ã–ª–∫–∞</a>`,
      '',
      `<b>3. –ú–µ—Ç–æ–¥ ${newLinksListArray[2].shift()}()</b> - <a href="${
        newLinksListArray[2]
      }">–°—Å—ã–ª–∫–∞</a>`,
      '',
      `<b>4. –ú–µ—Ç–æ–¥ ${newLinksListArray[3].shift()}()</b> - <a href="${
        newLinksListArray[3]
      }">–°—Å—ã–ª–∫–∞</a>`,
      '',
      `<b>4. –ú–µ—Ç–æ–¥ ${newLinksListArray[4].shift()}()</b> - <a href="${
        newLinksListArray[4]
      }">–°—Å—ã–ª–∫–∞</a>`
    ].join('\n')
  });
}

async function sendTask({ argument, send }: any) {
  if (!argument) {
    return;
  }
  let newTasksArray: any = [];

  Object.keys(taskList).map(function (key) {
    if (key === argument) {
      let x = taskList[key];
      newTasksArray = Object.entries(x);
    }
  });
  await send({
    message: [
      `üíª <b>–ü—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ${newTasksArray[0].shift()}</b>`,
      '',
      `${newTasksArray[0]}`,
      '',
      `–ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –≤—ã–≤–µ–¥–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å, –∞ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è: –ø–æ–Ω–∏–º–∞–µ—Ç–µ –ª–∏ –≤—ã –ø–æ—á–µ–º—É —Ç–∞–∫, –∏–ª–∏ –Ω–µ—Ç`,
    ].join('\n'),
  });
}

export default {
  id: 'arrayMethodsCourse',
  order: 30,
  name: '–ò–∑—É—á–µ–Ω–∏–µ JS –º–µ—Ç–æ–¥–æ–≤ –º–∞—Å—Å–∏–≤–∞',
  active: true,
  description: () => {
    return [
      'üíª <b>30 JS –º–µ—Ç–æ–¥–æ–≤ –º–∞—Å—Å–∏–≤–∞ –∑–∞ 6 –¥–Ω–µ–π</b>',
      '',
      `–ù–∞–¥–æ–µ–ª–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –∏–¥—Ç–∏ –Ω–∞ <i>StackOverflow</i> –∑–∞ –æ—á–µ—Ä–µ–¥–Ω—ã–º –ø—Ä–∏–º–µ—Ä–æ–º –∫–æ–¥–∞, –ø—ã—Ç–∞—è—Å—å –≤—Å–ø–æ–º–Ω–∏—Ç—å —á—Ç–æ –¥–µ–ª–∞–µ—Ç <b>filter()</b> –∏–ª–∏ <b>reduce()</b>? –ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è <b>splice()</b> –∏ <b>slice()</b>?`,
      '',
      '–ü—Ä–æ–π–¥–∏—Ç–µ —ç—Ç–æ—Ç –Ω–µ–±–æ–ª—å—à–æ–π –∫—É—Ä—Å –∏ –≤—ã—É—á–∏—Ç–µ –≤—Å–µ –º–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–∞ –≤ JavaScript',
      '',
      '–ù–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 6 –¥–Ω–µ–π –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ 5 –º–µ—Ç–æ–¥–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞, —Ç–∞–∫ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Ö –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.',
      '',
      '–ü–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –±–æ—Ç–∞ –¥–æ–ø. —Å—Å—ã–ª–∫–∏ –Ω–∞ MDN –ø—Ä–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–ª–∏ –≤–∑—è—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω—è–Ω–∏—è',
      '',
      '–í –¥–∞–ª—å–Ω–µ–π—à–µ–º, –∑–∞–¥–∞–Ω–∏—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∞–ø—Ä—è–º—É—é –≤ –±–æ—Ç–µ –≤ –≤–∏–¥–µ —Ç–µ—Å—Ç–∞',
    ].join('\n');
  },
  state: {
    methods: {},
    tasks: {},
  },
  initial: 'start',
  blocks: {
    start: {
      execute: async ({ state, setState, transition }) => {
        const allMethods = [
          'methods1',
          'methods2',
          'methods3',
          'methods4',
          'methods5',
          'methods6',
        ];

        const allTasks = ['task1', 'task2', 'task3', 'task4', 'task5', 'task6'];

        const restMethods = allMethods.filter(
          (method) => state.methods[method] == null
        );
        const restTasks = allTasks.filter((task) => state.tasks[task] == null);

        if (restMethods.length <= 0) {
          await transition('end');
        } else {
          let nextMethods = restMethods[0];
          let nextTasks = restTasks[0];

          if (!Object.keys(state.methods).length) {
            nextMethods = 'methods1';
            nextTasks = 'task1';
          }

          await setState({
            methods: Object.assign({}, state.methods, {
              [nextMethods]: false,
            }),
            tasks: Object.assign({}, state.tasks, {
              [nextTasks]: false,
            }),
          });

          await transition(nextMethods);
        }
      },
    },
    end: {
      wait: true,
      final: true,
      execute: async ({ send }) => {
        await send({
          message: [
            `üî• <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã—É—á–∏–ª–∏ 30 JS –º–µ—Ç–æ–¥–æ–≤ –º–∞—Å—Å–∏–≤–∞</b>`,
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ç–æ–Ω—É—Å–µ.`,
            '–£–¥–∞—á–Ω–æ–≥–æ –∫–æ–¥–∏–Ω–≥–∞!',
            '<i><a href="https://t.me/winterview_contact_bot">–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –∫—É—Ä—Å–µ: —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –∞ —á—Ç–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.</a></i>',
            '–ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–≤—Ç–æ—Ä–∞ –∫—É—Ä—Å–∞ @dalvelab',
          ].join('\n'),
        });
      },
    },
    methods1: {
      execute: async ({ state, send, transition }) => {
        await send({
          message: [
            getHeader(
              Object.keys(state.methods).length,
              '–ú–µ—Ç–æ–¥—ã: find, findIndex, includes, indexOf, lastIndexOf'
            ),
            `<b>1. find()</b> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —É—Å–ª–æ–≤–∏–µ —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä–Ω—ã–º`,
            '',
            `<b>2. findIndex()</b> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∏–Ω–¥–µ–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —É—Å–ª–æ–≤–∏–µ —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ä–Ω—ã–º`,
            '',
            '<b>3. includes()</b> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –∏–ª–∏ false –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç',
            '',
            '<b>4. indexOf()</b> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π –∏–Ω–¥–µ–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è –¥–≤–∏–≥–∞—è—Å—å —Å –Ω–∞—á–∞–ª–∞ –º–∞—Å—Å–∏–≤–∞. –í—ã–≤–æ–¥–∏—Ç -1 –ø—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ',
            '',
            '<b>5. lastIndexOf()</b> - —Ç–æ –∂–µ —Å–∞–º–æ–µ —á—Ç–æ –∏ indexOf, –Ω–æ –¥–≤–∏–≥–∞–µ—Ç—Å—è —Å –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π –∏–Ω–¥–µ–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è —Å –∫–æ–Ω—Ü–∞',
          ].join('\n'),
          image: `codeImages/methods1.png`,
          buttons: getButtons(['methods1', 'task1']),
        });

        await transition('start');
      },
    },
    methods2: {
      wait: true,
      execute: async ({ state, send, transition }) => {
        await send({
          message: [
            getHeader(
              Object.keys(state.methods).length,
              '–ú–µ—Ç–æ–¥—ã: filter, every, entries, sort, reverse'
            ),
            `<b>1. filter()</b> - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é`,
            '',
            `<b>2. every()</b> - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∑–∞–¥–∞–Ω–Ω–æ–º—É —É—Å–ª–æ–≤–∏—é`,
            '',
            `<b>3. entries()</b> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ —Å –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º`,
            '',
            `<b>4. sort()</b> - —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ, –Ω–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ (–ø–æ—ç—Ç–æ–º—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —á–∏—Å–µ–ª –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)`,
            '',
            `<b>5. reverse()</b> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å ¬´—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º–∏¬ª –∑–Ω–∞—á–µ–Ω–∏—è–º–∏`,
          ].join('\n'),
          image: `codeImages/methods2.png`,
          buttons: getButtons(['methods2', 'task2']),
        });
        await transition('start');
      },
    },
    methods3: {
      wait: true,
      execute: async ({ state, send, transition }) => {
        await send({
          message: [
            getHeader(
              Object.keys(state.methods).length,
              '–ú–µ—Ç–æ–¥—ã: copyWithIn, fill, map, from, join'
            ),
            `<b>1. copyWithIn()</b> - –∑–∞–º–µ–Ω—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –º–∞—Å—Å–∏–≤–∞`,
            '',
            `<b>2. fill()</b> - –∑–∞–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ —á–∏—Å–ª–æ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞ (value, start[], end.length)`,
            '',
            `<b>3. map()</b> - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞`,
            '',
            `<b>4. from()</b> - —Å–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏`,
            '',
            `<b>5. join()</b> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ —Å–∏–º–≤–æ–ª–æ–º, –≤–≤–µ–¥–µ–Ω–Ω—ã–º –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞`,
          ].join('\n'),
          image: `codeImages/methods3.png`,
          buttons: getButtons(['methods3', 'task3']),
        });

        await transition('start');
      },
    },
    methods4: {
      wait: true,
      execute: async ({ state, send, transition }) => {
        await send({
          message: [
            getHeader(
              Object.keys(state.methods).length,
              '–ú–µ—Ç–æ–¥—ã: toString, pop, push, shift, unshift'
            ),
            `<b>1. toString()</b> - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É`,
            '',
            `<b>2. pop()</b> - —É–±–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞`,
            '',
            `<b>3. push()</b> - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞`,
            '',
            `<b>4. shift()</b> - —É–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ`,
            '',
            `<b>5. unshift()</b> - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞`,
          ].join('\n'),
          image: `codeImages/methods4.png`,
          buttons: getButtons(['methods4', 'task4']),
        });

        await transition('start');
      },
    },
    methods5: {
      wait: true,
      execute: async ({ state, send, transition }) => {
        await send({
          message: [
            getHeader(
              Object.keys(state.methods).length,
              '–ú–µ—Ç–æ–¥—ã: splice, values, forEach, slice, some'
            ),
            `<b>1. splice()</b> - —É–¥–∞–ª—è–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã. (index [], –∫–æ–ª-–≤–æ —É–±—Ä–∞—Ç—å, '–¥–æ–±–∞–≤–∏—Ç—å')`,
            '',
            `<b>2. values()</b> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å–∏–≤–∞`,
            '',
            `<b>3. forEach()</b> - –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞`,
            '',
            `<b>4. slice()</b> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ –≤–∏–¥–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞. slice ([–Ω–∞—á–∞–ª—å–Ω—ã–π_–∏–Ω–¥–µ–∫—Å], [–∫–æ–Ω–µ—á–Ω—ã–π_–∏–Ω–¥–µ–∫—Å - –Ω–µ –≤–∫–ª—é—á–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ])`,
            '',
            `<b>5. some()</b> - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞`,
          ].join('\n'),
          image: `codeImages/methods5.png`,
          buttons: getButtons(['methods5', 'task5']),
        });

        await transition('start');
      },
    },
    methods6: {
      wait: true,
      execute: async ({ state, send, transition }) => {
        await send({
          message: [
            getHeader(
              Object.keys(state.methods).length,
              '–ú–µ—Ç–æ–¥—ã: keys, reduce, reduceRight, concat, valueOf'
            ),
            `<b>1. keys()</b> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –º–∞—Å—Å–∏–≤–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã`,
            '',
            `<b>2. reduce()</b> - –ø—Ä–∏–≤–æ–¥–∏—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∫ –æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é (–¥–≤–∏–≥–∞—è—Å—å —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ). –ú–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∏–Ω–∏–º—É–º –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è: –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä (–∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç callback –ø–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞) –∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ç–µ–∫—É—â–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞)`,
            '',
            `<b>3. reduceRight()</b> - —Ç–æ –∂–µ —Å–∞–º–æ–µ —á—Ç–æ –∏ reduce, –Ω–æ –¥–≤–∏–≥–∞–µ—Ç—Å—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ`,
            '',
            `<b>4. concat()</b> - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –ø—É—Ç–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–≤—É—Ö –¥—Ä—É–≥–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤`,
            '',
            `<b>5. valueOf()</b> - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞`,
          ].join('\n'),
          image: `codeImages/methods6.png`,
          buttons: getButtons(['methods6', 'task6']),
        });

        await transition('start');
      },
    },
  },

  actions: {
    sendTask: async ({ notify, state, setState, send, argument }) => {
      if (!argument) {
        return;
      }
      const motivateTasks = [
        '–û—Ç–ª–∏—á–Ω–æ!üòâ –ê —Ç–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å!',
        '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!üòÉ –£–≤–µ—Ä–µ–Ω –í–∞–º –Ω–µ —Å–æ—Å—Ç–∞–≤–∏—Ç —Ç—Ä—É–¥–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å',
        '–í—ã –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ —Å—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç–µ!üß§ –ö–∞–∫ –Ω–∞—Å—á–µ—Ç –Ω–µ–±–æ–ª—å—à–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞?',
      ];

      await notify(
        motivateTasks[Math.floor(Math.random() * motivateTasks.length)]
      );

      // await setState({
      //   tasks: {
      //     ...state.tasks,
      //     [argument]: true
      //   }
      // });

      await sendTask({ argument, send });
    },
    sendMethodsLinks: async ({
      argument,
      state,
      setState,
      notify,
      edit,
      send,
    }) => {
      if (!argument) {
        return;
      }

      const motivateLinks = [];

      await notify(`–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ!`);

      await setState({
        methods: {
          ...state.methods,
          [argument]: true,
        },
      });

      await sendLinks({ argument, send });
    },
  },
} as ICourse;
