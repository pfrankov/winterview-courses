import {ICourse} from "../typings";

const tasks = require('./tasks.js');

function getHeader(day: string | number, task: any, tasksPerDay: any) {
    return [
        `üü® <b>JavaScript. –î–µ–Ω—å ${day}</b>`,
        tasksPerDay > 1 && `<i>–ó–∞–¥–∞—á–∞ ${task} –∏–∑ ${tasksPerDay}</i>`,
    ].filter(x=>x).join('\n') + '\n';
}

const TOTAL_TASKS = Object.keys(tasks).length;
const TOTAL_DAYS = 7;

export default {
    id: 'javascriptQuestions',
    order: 50,
    name: '–í–æ–ø—Ä–æ—Å—ã –ø–æ JavaScript',
    active: true,
    description: () => {
        return [
            'üü® <b>–í–æ–ø—Ä–æ—Å—ã –ø–æ JavaScript</b>',
            '',
            '–ù–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã –∑–Ω–∞–µ—Ç–µ JavaScript?',
            '–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –∫ –≤–æ–ø—Ä–æ—Å–∞–º ¬´–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥¬ª?',
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ —É–∑–Ω–∞–π—Ç–µ –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –æ JavaScript –≤ —ç—Ç–æ–º –∫—É—Ä—Å–µ.',
            '',
            '–ö—É—Ä—Å –¥–ª–∏—Ç—Å—è –Ω–µ–¥–µ–ª—é. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ JavaScript —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞. –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö ‚Äî –≤–µ—Ä–Ω—ã–π.',
            `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, –ø–æ—Å–∫–æ–ª—å–∫—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ <b>${TOTAL_TASKS} –≤–æ–ø—Ä–æ—Å–æ–≤</b> –∑–∞ —Ä–∞–∑ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ä–µ–∞–ª—å–Ω–æ.`,
            '–ü—Ä–∏ –∫–∞–∂–¥–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∫—É—Ä—Å–∞, –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.',
        ].join('\n');
    },
    state: {
        freeSolutions: 8,
        tasksPerDay: 3,
        tasksSent: 0,
        tasks: {},
        day: 1,
        isInvitedToPatreon: false,
    },
    initial: 'start',
    blocks: {
        promotePatreon: {
            paywall: true,
            execute: async ({ setState, send, transition }) => {
                await send({
                    message: [
                        'üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø–∞—Ç—Ä–æ–Ω!</b>',
                        '–í—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–Ω—è—Ç—ã'
                    ].join('\n')
                });
                await setState({
                    freeSolutions: TOTAL_TASKS,
                    isInvitedToPatreon: false,
                });
                await transition('nextTask');
            }
        },

        start: {
            execute: async ({ send }) => {
                await send({
                    message: [
                        '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å</b>',
                        '',
                        '–ß–µ–º –º–µ–Ω—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å—ã –¥–æ–π—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞.',
                    ].join('\n'),
                    buttons: [
                        {
                            text: '1 –≤–æ–ø—Ä–æ—Å ‚Äî 7 –∑–∞ –Ω–µ–¥–µ–ª—é',
                            argument: 'ONE',
                            action: 'selectNumberOfQuestions'
                        },
                        {
                            text: 'üéü 3 –≤–æ–ø—Ä–æ—Å–∞ ‚Äî 21 –∑–∞ –Ω–µ–¥–µ–ª—é',
                            argument: 'THREE',
                            action: 'selectNumberOfQuestions'
                        },
                        {
                            text: 'üéü 5 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 35 –∑–∞ –Ω–µ–¥–µ–ª—é',
                            argument: 'FIVE',
                            action: 'selectNumberOfQuestions'
                        }
                    ]
                });
            }
        },

        nextTask: {
            execute: async ({ send, state, setState, transition }) => {
                let tasksSent = state.tasksSent;
                if (tasksSent >= state.tasksPerDay) {
                    if (state.day === TOTAL_DAYS) {
                        return transition('end');
                    }

                    if (state.isInvitedToPatreon) {
                        return transition('promotePatreon');
                    }
                    return transition('newDay');
                }

                const taskKey = Object.keys(state.tasks)[(state.day - 1) * state.tasksPerDay + tasksSent];

                await Promise.all(tasks[taskKey].question.map(async (mes: any, index: number, messages: any[]) => {
                    const header = index === 0 ? getHeader(state.day, tasksSent + 1, state.tasksPerDay) : '';

                    await send({
                        message: [header, mes.message].filter(x=>x).join('\n'),
                        image: mes.image || undefined,
                        buttons: messages.length - 1 === index ? [
                            ['A', 'B', 'C', 'D', 'E'].slice(0, tasks[taskKey].options || 4).map((char) => {
                                return {
                                    action: 'answer',
                                    argument: `${taskKey}-${char}`,
                                    text: char,
                                }
                            })
                        ] : []
                    });
                }));

                await setState({
                    tasksSent: tasksSent + 1,
                });
            }
        },

        newDay: {
            wait: true,
            execute: async ({ state, setState, transition }) => {
                await setState({
                    tasksSent: 0,
                    day: state.day + 1
                });

                await transition('nextTask');
            },
        },

        end: {
            final: true,
            wait: true,
            execute: async ({ state, send }) => {
                const totalQuestions =  Object.keys(state.tasks).length;
                const answered = Object.keys(state.tasks).filter(key => state.tasks[key]).length;
                const percents = Math.round(answered / totalQuestions * 100);

                const empty = '‚ñë';
                const full = '‚ñà';
                const lineWidth = 20;

                const filled = Math.round(lineWidth / 100 * percents);
                const progress = full.repeat(filled) + empty.repeat(lineWidth - filled);


                let additionalMessage = '';


                if (percents <= 0) {
                    if (totalQuestions === Object.keys(state.tasks).filter(key => state.tasks[key] === null).length) {
                        additionalMessage = '–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫—É—Ä—Å –µ—â—ë —Ä–∞–∑, –∑–Ω–∞–π—Ç–µ: —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.';
                    } else {
                        additionalMessage = '–ö–∞–∂–µ—Ç—Å—è, –≤—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ò –≤–∞–º —ç—Ç–æ —É–¥–∞–ª–æ—Å—å!';
                    }
                }
                if (percents >= 1) {
                    additionalMessage = '–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å –Ω–∞—á–∞—Ç—ã–µ –¥–µ–ª–∞. <a href="https://t.me/winterview/61">–ü–æ—á–∏—Ç–∞–π—Ç–µ –ø–æ—Å—Ç –æ–± —ç—Ç–æ–º</a>.';
                }
                if (percents >= 20 && percents < 30) {
                    additionalMessage = '–¢–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å—Å—è –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–Ω–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–º –≤—ã–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–æ–≤. –í —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ, –∏–∑ –≤–∞—Å –≤—ã–π–¥–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª.';
                }
                if (percents >= 30) {
                    additionalMessage = '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —É—á–∏—Ç—å JavaScript. –ù–µ –±—Ä–æ—Å–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ, —É–¥–µ–ª—è–π—Ç–µ –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑.';
                }
                if (percents >= 51) {
                    additionalMessage = '–ß—É—Ç—å –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã ‚Äî —ç—Ç–æ —É–∂–µ –¥–æ—Å—Ç–æ–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ù–æ —è–≤–Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏.';
                }
                if (percents >= 70) {
                    additionalMessage = '–£–≤–µ—Ä–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –∏ –ª—É—á—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑–æ–∫.';
                }
                if (percents >= 90) {
                    additionalMessage = '–¢–æ–ª—å–∫–æ —á—Ç–æ –≤—ã –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –æ—Ç–ª–∏—á–Ω—ã–µ –∑–Ω–∞–Ω–∏—è JavaScript. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üëç';
                }
                if (percents >= 100) {
                    if (totalQuestions > TOTAL_DAYS) {
                        additionalMessage = '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í—ã –∑–Ω–∞–µ—Ç–µ JavaScript, –∫–∞–∫ —Å–≤–æ–∏ —à–µ—Å—Ç—å –ø–∞–ª—å—Ü–µ–≤ üëΩ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–π—Ç–µ –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞!';
                    } else {
                        additionalMessage = '–≠—Ç–æ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ, –ø—Ä–∞–≤–¥–∞? –ü–æ—á–µ–º—É –±—ã –Ω–µ –≤–∑—è—Ç—å –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤?'
                    }
                }

                await send({
                    message: [
                        'üü® <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</b>',
                        '',
                        `${progress} <b>${percents}%</b>`,
                        `–í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ <b>${answered}</b> –∏–∑ ${totalQuestions} –≤–æ–ø—Ä–æ—Å–æ–≤.`,
                        `${additionalMessage}`,
                        '',
                        '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –≤ <a href="https://t.me/joinchat/BIV8GhdjiNVL4UobGuC5TA">—á–∞—Ç–µ Winterview</a>.',
                    ].join('\n')
                });
            },
        }
    },
    actions: {
        answer: async ({ state, setState, send, edit, transition, argument, notify, isPatron }) => {
            if (!argument) {
                return;
            }

            const matches = argument.match(/^task(\d+)-([ABCDE])$/);
            if (!matches) {
                return;
            }

            const taskNum = matches[1];
            const answer = matches[2];

            const task = tasks[`task${taskNum}`];
            const isCorrect = task.answer === answer;

            await edit({
               buttons: [
                   ['A', 'B', 'C', 'D', 'E'].slice(0, task.options || 4).map((char) => {
                       let text = ' ';

                       if ((answer === char && isCorrect) || task.answer === char) {
                           text = '‚úÖ ' + char;
                       } else if (answer === char) {
                           text = '‚ùå ' + char;
                       }

                       return {
                           action: 'noop',
                           text,
                       }
                   })

               ],
            });

            const rightAnswers = ['–í–µ—Ä–Ω–æ', '–¢–æ—á–Ω–æ', '–û—Ç–ª–∏—á–Ω–æ', '–ü—Ä–∞–≤–∏–ª—å–Ω–æ', '–ü–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–∞–≤–¥—É', '–í—ã –∑–Ω–∞–ª–∏!'];
            const wrongAnswers = ['–ù–µ –ø–æ—Ö–æ–∂–µ', '–í—Ä—è–¥ –ª–∏', '–°–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ', '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', 'H–µ —É–≥–∞–¥–∞–ª–∏'];
            await notify(isCorrect ? '‚úÖ ' + rightAnswers[Math.floor(Math.random() * rightAnswers.length)] : '‚ùå ' + wrongAnswers[Math.floor(Math.random() * wrongAnswers.length)]);

            state.tasks[`task${taskNum}`] = isCorrect;
            await setState({
                tasks: state.tasks
            });

            if (state.freeSolutions > 0) {
                try {
                    await Promise.all(tasks[`task${taskNum}`].solution.map(async (mes: any) => {
                        await send({
                            ...mes,
                        });
                    }));
                } catch(e) {}

                await setState({
                    freeSolutions: state.freeSolutions - 1
                });
            }

            if (state.freeSolutions === 1) {
                const isActivePatron = await isPatron();

                if (isActivePatron) {
                    await setState({
                        freeSolutions: TOTAL_TASKS,
                    });
                } else {
                    await send({
                        message: [
                            'üü® <b>–≠—Ç–æ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.</b>',
                            '',
                            'üéü <a href="https://www.patreon.com/winterview?tg=jq">–ü–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞ –ü–∞—Ç—Ä–µ–æ–Ω–µ</a> –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á.',
                            '',
                            '‚ÄºÔ∏è <i>–ï—Å–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å üéü ‚Äî –∫—É—Ä—Å –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –≤–∞—à–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ò–õ–ò –æ—Ç–º–µ–Ω—ã –∫—É—Ä—Å–∞.</i>',
                        ].join('\n'),
                        buttons: [
                            [
                                {
                                    text: 'üéü –ü—É—Å—Ç–∏—Ç–µ, —è –ø–∞—Ç—Ä–æ–Ω!',
                                    action: 'promotePatreon',
                                },
                                {
                                    text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫—É—Ä—Å',
                                    action: 'continueCourse',
                                },
                            ]
                        ]
                    })
                }
            }

            await transition('nextTask');
        },
        selectNumberOfQuestions: async ({setState, argument, transition, edit}) => {
            if (!argument) {
                return;
            }

            // @ts-ignore
            const selected = {
                'ONE': 1,
                'THREE': 3,
                'FIVE': 5,
            }[argument];

            if (!selected) {
                return;
            }

            // @ts-ignore
            const freeSolutions = {
                'ONE': 8,
                'THREE': 9,
                'FIVE': 10,
            }[argument];

            await edit({
                buttons: [],
            });

            const taskNumbers = Array(TOTAL_TASKS).fill(1).map((x, i) => i + 1).sort(() => 0.5 - Math.random()).slice(0, selected * TOTAL_DAYS);

            await setState({
                tasks: taskNumbers.reduce((acc, taskNumber) => {
                    // @ts-ignore
                    acc[`task${taskNumber}`] = null;

                    return acc;
                }, {}),

                tasksPerDay: selected,
                freeSolutions,
            });

            await transition('nextTask');
        },
        promotePatreon: async ({setState, argument, transition, edit}) => {
            await edit({
               buttons: [],
            });
            await setState({
                isInvitedToPatreon: true,
            });
            await transition('promotePatreon');
        },
        continueCourse: async ({setState, argument, transition, edit}) => {
            await edit({
                buttons: [],
            });
            await transition('nextTask');
        },
        noop: async ({notify}) => {
            const reasons = ['–°—Ç–∞–≤–∫–∏ —Å–¥–µ–ª–∞–Ω—ã. –°—Ç–∞–≤–æ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç', '–ó–¥–µ—Å—å –Ω–µ –Ω–∞ —á—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å', '–í—ã–±–æ—Ä –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å', 'üëç –õ–∞–π–∫ –∑–∞ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å'];

            return notify(reasons[Math.floor(Math.random() * reasons.length)]);
        }
    }
} as ICourse;